
Lab1_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001918  08001918  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001918  08001918  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001918  08001918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001918  08001918  00011918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  0800192c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800192c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003adf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011e9  00000000  00000000  00023b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00024d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00025168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b8d  00000000  00000000  00025518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bbd  00000000  00000000  0003b0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e8f  00000000  00000000  00040c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000baaf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ebc  00000000  00000000  000bab44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080018dc 	.word	0x080018dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080018dc 	.word	0x080018dc

0800014c <ex1_init>:
 *  Created on: Sep 6, 2024
 *      Author: thuyh
 */

#include "ex1.h"
void ex1_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <ex1_init+0x20>)
 8000158:	f000 fdfa 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000162:	4802      	ldr	r0, [pc, #8]	; (800016c <ex1_init+0x20>)
 8000164:	f000 fdf4 	bl	8000d50 <HAL_GPIO_WritePin>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40010800 	.word	0x40010800

08000170 <ex1_run>:
void ex1_run(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 8000174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <ex1_run+0x1c>)
 800017a:	f000 fe01 	bl	8000d80 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA,LED_YELLOW_Pin);
 800017e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000182:	4802      	ldr	r0, [pc, #8]	; (800018c <ex1_run+0x1c>)
 8000184:	f000 fdfc 	bl	8000d80 <HAL_GPIO_TogglePin>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40010800 	.word	0x40010800

08000190 <ex10_init>:
 *  Created on: Sep 7, 2024
 *      Author: thuyh
 */
#include "ex10.h"

void ex10_init(){
 8000190:	b580      	push	{r7, lr}
 8000192:	b08a      	sub	sp, #40	; 0x28
 8000194:	af0a      	add	r7, sp, #40	; 0x28
	  clearAllClock(GPIOA, GREEN_1_Pin, YELLOW_1_Pin, RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin,
 8000196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800019a:	9308      	str	r3, [sp, #32]
 800019c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001a0:	9307      	str	r3, [sp, #28]
 80001a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001a6:	9306      	str	r3, [sp, #24]
 80001a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001ac:	9305      	str	r3, [sp, #20]
 80001ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001b2:	9304      	str	r3, [sp, #16]
 80001b4:	2380      	movs	r3, #128	; 0x80
 80001b6:	9303      	str	r3, [sp, #12]
 80001b8:	2340      	movs	r3, #64	; 0x40
 80001ba:	9302      	str	r3, [sp, #8]
 80001bc:	2320      	movs	r3, #32
 80001be:	9301      	str	r3, [sp, #4]
 80001c0:	2310      	movs	r3, #16
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2308      	movs	r3, #8
 80001c6:	2204      	movs	r2, #4
 80001c8:	2102      	movs	r1, #2
 80001ca:	4803      	ldr	r0, [pc, #12]	; (80001d8 <ex10_init+0x48>)
 80001cc:	f001 f9ce 	bl	800156c <clearAllClock>
	  GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin);
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40010800 	.word	0x40010800

080001dc <ex10_run>:
uint16_t num = 0;
void ex10_run(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b08e      	sub	sp, #56	; 0x38
 80001e0:	af0a      	add	r7, sp, #40	; 0x28



		  if(num>=43200){
 80001e2:	4bbf      	ldr	r3, [pc, #764]	; (80004e0 <ex10_run+0x304>)
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	f64a 02bf 	movw	r2, #43199	; 0xa8bf
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d902      	bls.n	80001f4 <ex10_run+0x18>
			  num = 0;
 80001ee:	4bbc      	ldr	r3, [pc, #752]	; (80004e0 <ex10_run+0x304>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	801a      	strh	r2, [r3, #0]
		  }

		  uint16_t second = num % 60;
 80001f4:	4bba      	ldr	r3, [pc, #744]	; (80004e0 <ex10_run+0x304>)
 80001f6:	881a      	ldrh	r2, [r3, #0]
 80001f8:	4bba      	ldr	r3, [pc, #744]	; (80004e4 <ex10_run+0x308>)
 80001fa:	fba3 1302 	umull	r1, r3, r3, r2
 80001fe:	0959      	lsrs	r1, r3, #5
 8000200:	460b      	mov	r3, r1
 8000202:	011b      	lsls	r3, r3, #4
 8000204:	1a5b      	subs	r3, r3, r1
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	81fb      	strh	r3, [r7, #14]
		  uint16_t minutes = (num / 60 )% 60;
 800020c:	4bb4      	ldr	r3, [pc, #720]	; (80004e0 <ex10_run+0x304>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	4ab4      	ldr	r2, [pc, #720]	; (80004e4 <ex10_run+0x308>)
 8000212:	fba2 2303 	umull	r2, r3, r2, r3
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	b29a      	uxth	r2, r3
 800021a:	4bb2      	ldr	r3, [pc, #712]	; (80004e4 <ex10_run+0x308>)
 800021c:	fba3 1302 	umull	r1, r3, r3, r2
 8000220:	0959      	lsrs	r1, r3, #5
 8000222:	460b      	mov	r3, r1
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	1a5b      	subs	r3, r3, r1
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	81bb      	strh	r3, [r7, #12]
		  uint16_t hour = (num / 3600);
 800022e:	4bac      	ldr	r3, [pc, #688]	; (80004e0 <ex10_run+0x304>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	4aad      	ldr	r2, [pc, #692]	; (80004e8 <ex10_run+0x30c>)
 8000234:	fba2 2303 	umull	r2, r3, r2, r3
 8000238:	0adb      	lsrs	r3, r3, #11
 800023a:	817b      	strh	r3, [r7, #10]
		  uint16_t led_secound = second/5;
 800023c:	89fb      	ldrh	r3, [r7, #14]
 800023e:	4aab      	ldr	r2, [pc, #684]	; (80004ec <ex10_run+0x310>)
 8000240:	fba2 2303 	umull	r2, r3, r2, r3
 8000244:	089b      	lsrs	r3, r3, #2
 8000246:	813b      	strh	r3, [r7, #8]
		  uint16_t led_minutes = minutes /5;
 8000248:	89bb      	ldrh	r3, [r7, #12]
 800024a:	4aa8      	ldr	r2, [pc, #672]	; (80004ec <ex10_run+0x310>)
 800024c:	fba2 2303 	umull	r2, r3, r2, r3
 8000250:	089b      	lsrs	r3, r3, #2
 8000252:	80fb      	strh	r3, [r7, #6]
		  uint16_t led_hour = hour;
 8000254:	897b      	ldrh	r3, [r7, #10]
 8000256:	80bb      	strh	r3, [r7, #4]





		 setNumberOnClock(GPIOA,   RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin, GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin,GREEN_1_Pin,YELLOW_1_Pin,led_secound);
 8000258:	893b      	ldrh	r3, [r7, #8]
 800025a:	9309      	str	r3, [sp, #36]	; 0x24
 800025c:	2304      	movs	r3, #4
 800025e:	9308      	str	r3, [sp, #32]
 8000260:	2302      	movs	r3, #2
 8000262:	9307      	str	r3, [sp, #28]
 8000264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000268:	9306      	str	r3, [sp, #24]
 800026a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800026e:	9305      	str	r3, [sp, #20]
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	9304      	str	r3, [sp, #16]
 8000276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800027a:	9303      	str	r3, [sp, #12]
 800027c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000280:	9302      	str	r3, [sp, #8]
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	2340      	movs	r3, #64	; 0x40
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2320      	movs	r3, #32
 800028c:	2210      	movs	r2, #16
 800028e:	2108      	movs	r1, #8
 8000290:	4897      	ldr	r0, [pc, #604]	; (80004f0 <ex10_run+0x314>)
 8000292:	f001 f9c5 	bl	8001620 <setNumberOnClock>
		 setNumberOnClock(GPIOA,   RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin, GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin,GREEN_1_Pin,YELLOW_1_Pin,led_minutes);
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	9309      	str	r3, [sp, #36]	; 0x24
 800029a:	2304      	movs	r3, #4
 800029c:	9308      	str	r3, [sp, #32]
 800029e:	2302      	movs	r3, #2
 80002a0:	9307      	str	r3, [sp, #28]
 80002a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a6:	9306      	str	r3, [sp, #24]
 80002a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002ac:	9305      	str	r3, [sp, #20]
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	9304      	str	r3, [sp, #16]
 80002b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002b8:	9303      	str	r3, [sp, #12]
 80002ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002be:	9302      	str	r3, [sp, #8]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	2340      	movs	r3, #64	; 0x40
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2320      	movs	r3, #32
 80002ca:	2210      	movs	r2, #16
 80002cc:	2108      	movs	r1, #8
 80002ce:	4888      	ldr	r0, [pc, #544]	; (80004f0 <ex10_run+0x314>)
 80002d0:	f001 f9a6 	bl	8001620 <setNumberOnClock>
		 setNumberOnClock(GPIOA,   RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin, GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin,GREEN_1_Pin,YELLOW_1_Pin,led_hour);
 80002d4:	88bb      	ldrh	r3, [r7, #4]
 80002d6:	9309      	str	r3, [sp, #36]	; 0x24
 80002d8:	2304      	movs	r3, #4
 80002da:	9308      	str	r3, [sp, #32]
 80002dc:	2302      	movs	r3, #2
 80002de:	9307      	str	r3, [sp, #28]
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002ea:	9305      	str	r3, [sp, #20]
 80002ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f0:	9304      	str	r3, [sp, #16]
 80002f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002f6:	9303      	str	r3, [sp, #12]
 80002f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fc:	9302      	str	r3, [sp, #8]
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	2340      	movs	r3, #64	; 0x40
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2320      	movs	r3, #32
 8000308:	2210      	movs	r2, #16
 800030a:	2108      	movs	r1, #8
 800030c:	4878      	ldr	r0, [pc, #480]	; (80004f0 <ex10_run+0x314>)
 800030e:	f001 f987 	bl	8001620 <setNumberOnClock>
		 if((led_secound+11)%12!=led_hour&&(led_secound+11)%12!=led_minutes){
 8000312:	893b      	ldrh	r3, [r7, #8]
 8000314:	f103 010b 	add.w	r1, r3, #11
 8000318:	4b76      	ldr	r3, [pc, #472]	; (80004f4 <ex10_run+0x318>)
 800031a:	fb83 2301 	smull	r2, r3, r3, r1
 800031e:	105a      	asrs	r2, r3, #1
 8000320:	17cb      	asrs	r3, r1, #31
 8000322:	1ad2      	subs	r2, r2, r3
 8000324:	4613      	mov	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	4413      	add	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	1aca      	subs	r2, r1, r3
 800032e:	88bb      	ldrh	r3, [r7, #4]
 8000330:	429a      	cmp	r2, r3
 8000332:	d03d      	beq.n	80003b0 <ex10_run+0x1d4>
 8000334:	893b      	ldrh	r3, [r7, #8]
 8000336:	f103 010b 	add.w	r1, r3, #11
 800033a:	4b6e      	ldr	r3, [pc, #440]	; (80004f4 <ex10_run+0x318>)
 800033c:	fb83 2301 	smull	r2, r3, r3, r1
 8000340:	105a      	asrs	r2, r3, #1
 8000342:	17cb      	asrs	r3, r1, #31
 8000344:	1ad2      	subs	r2, r2, r3
 8000346:	4613      	mov	r3, r2
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	1aca      	subs	r2, r1, r3
 8000350:	88fb      	ldrh	r3, [r7, #6]
 8000352:	429a      	cmp	r2, r3
 8000354:	d02c      	beq.n	80003b0 <ex10_run+0x1d4>
			 clearNumberOnClock(GPIOA,   RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin, GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin,GREEN_1_Pin,YELLOW_1_Pin,(led_secound+11)%12);
 8000356:	893b      	ldrh	r3, [r7, #8]
 8000358:	f103 020b 	add.w	r2, r3, #11
 800035c:	4b65      	ldr	r3, [pc, #404]	; (80004f4 <ex10_run+0x318>)
 800035e:	fb83 1302 	smull	r1, r3, r3, r2
 8000362:	1059      	asrs	r1, r3, #1
 8000364:	17d3      	asrs	r3, r2, #31
 8000366:	1ac9      	subs	r1, r1, r3
 8000368:	460b      	mov	r3, r1
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	440b      	add	r3, r1
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	1ad1      	subs	r1, r2, r3
 8000372:	b28b      	uxth	r3, r1
 8000374:	9309      	str	r3, [sp, #36]	; 0x24
 8000376:	2304      	movs	r3, #4
 8000378:	9308      	str	r3, [sp, #32]
 800037a:	2302      	movs	r3, #2
 800037c:	9307      	str	r3, [sp, #28]
 800037e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000382:	9306      	str	r3, [sp, #24]
 8000384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000388:	9305      	str	r3, [sp, #20]
 800038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038e:	9304      	str	r3, [sp, #16]
 8000390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000394:	9303      	str	r3, [sp, #12]
 8000396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800039a:	9302      	str	r3, [sp, #8]
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	9301      	str	r3, [sp, #4]
 80003a0:	2340      	movs	r3, #64	; 0x40
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2320      	movs	r3, #32
 80003a6:	2210      	movs	r2, #16
 80003a8:	2108      	movs	r1, #8
 80003aa:	4851      	ldr	r0, [pc, #324]	; (80004f0 <ex10_run+0x314>)
 80003ac:	f001 f9e4 	bl	8001778 <clearNumberOnClock>
		 }
		 if((led_minutes+11)%12!=led_hour&&(led_minutes+11)%12!=led_secound){
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	f103 010b 	add.w	r1, r3, #11
 80003b6:	4b4f      	ldr	r3, [pc, #316]	; (80004f4 <ex10_run+0x318>)
 80003b8:	fb83 2301 	smull	r2, r3, r3, r1
 80003bc:	105a      	asrs	r2, r3, #1
 80003be:	17cb      	asrs	r3, r1, #31
 80003c0:	1ad2      	subs	r2, r2, r3
 80003c2:	4613      	mov	r3, r2
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	4413      	add	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	1aca      	subs	r2, r1, r3
 80003cc:	88bb      	ldrh	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d03d      	beq.n	800044e <ex10_run+0x272>
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	f103 010b 	add.w	r1, r3, #11
 80003d8:	4b46      	ldr	r3, [pc, #280]	; (80004f4 <ex10_run+0x318>)
 80003da:	fb83 2301 	smull	r2, r3, r3, r1
 80003de:	105a      	asrs	r2, r3, #1
 80003e0:	17cb      	asrs	r3, r1, #31
 80003e2:	1ad2      	subs	r2, r2, r3
 80003e4:	4613      	mov	r3, r2
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	4413      	add	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	1aca      	subs	r2, r1, r3
 80003ee:	893b      	ldrh	r3, [r7, #8]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d02c      	beq.n	800044e <ex10_run+0x272>
			 clearNumberOnClock(GPIOA,   RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin, GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin,GREEN_1_Pin,YELLOW_1_Pin,(led_minutes+11)%12);
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	f103 020b 	add.w	r2, r3, #11
 80003fa:	4b3e      	ldr	r3, [pc, #248]	; (80004f4 <ex10_run+0x318>)
 80003fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000400:	1059      	asrs	r1, r3, #1
 8000402:	17d3      	asrs	r3, r2, #31
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	460b      	mov	r3, r1
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	440b      	add	r3, r1
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	1ad1      	subs	r1, r2, r3
 8000410:	b28b      	uxth	r3, r1
 8000412:	9309      	str	r3, [sp, #36]	; 0x24
 8000414:	2304      	movs	r3, #4
 8000416:	9308      	str	r3, [sp, #32]
 8000418:	2302      	movs	r3, #2
 800041a:	9307      	str	r3, [sp, #28]
 800041c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000420:	9306      	str	r3, [sp, #24]
 8000422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000426:	9305      	str	r3, [sp, #20]
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	9304      	str	r3, [sp, #16]
 800042e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000432:	9303      	str	r3, [sp, #12]
 8000434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000438:	9302      	str	r3, [sp, #8]
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	2340      	movs	r3, #64	; 0x40
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2320      	movs	r3, #32
 8000444:	2210      	movs	r2, #16
 8000446:	2108      	movs	r1, #8
 8000448:	4829      	ldr	r0, [pc, #164]	; (80004f0 <ex10_run+0x314>)
 800044a:	f001 f995 	bl	8001778 <clearNumberOnClock>
		 }
		 if((led_hour+11)%12!=led_secound&&(led_hour+11)%12!=led_minutes){
 800044e:	88bb      	ldrh	r3, [r7, #4]
 8000450:	f103 010b 	add.w	r1, r3, #11
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <ex10_run+0x318>)
 8000456:	fb83 2301 	smull	r2, r3, r3, r1
 800045a:	105a      	asrs	r2, r3, #1
 800045c:	17cb      	asrs	r3, r1, #31
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	4613      	mov	r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	1aca      	subs	r2, r1, r3
 800046a:	893b      	ldrh	r3, [r7, #8]
 800046c:	429a      	cmp	r2, r3
 800046e:	d04b      	beq.n	8000508 <ex10_run+0x32c>
 8000470:	88bb      	ldrh	r3, [r7, #4]
 8000472:	f103 010b 	add.w	r1, r3, #11
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <ex10_run+0x318>)
 8000478:	fb83 2301 	smull	r2, r3, r3, r1
 800047c:	105a      	asrs	r2, r3, #1
 800047e:	17cb      	asrs	r3, r1, #31
 8000480:	1ad2      	subs	r2, r2, r3
 8000482:	4613      	mov	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	4413      	add	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	1aca      	subs	r2, r1, r3
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	429a      	cmp	r2, r3
 8000490:	d03a      	beq.n	8000508 <ex10_run+0x32c>
			 clearNumberOnClock(GPIOA,   RED_1_Pin, GREEN_2_Pin, YELLOW_2_Pin, RED_2_Pin, GREEN_3_Pin, YELLOW_3_Pin, RED_3_Pin, GREEN_4_Pin, YELLOW_4_Pin, RED_4_Pin,GREEN_1_Pin,YELLOW_1_Pin,(led_hour+11)%12);
 8000492:	88bb      	ldrh	r3, [r7, #4]
 8000494:	f103 020b 	add.w	r2, r3, #11
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <ex10_run+0x318>)
 800049a:	fb83 1302 	smull	r1, r3, r3, r2
 800049e:	1059      	asrs	r1, r3, #1
 80004a0:	17d3      	asrs	r3, r2, #31
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	460b      	mov	r3, r1
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	440b      	add	r3, r1
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	1ad1      	subs	r1, r2, r3
 80004ae:	b28b      	uxth	r3, r1
 80004b0:	9309      	str	r3, [sp, #36]	; 0x24
 80004b2:	2304      	movs	r3, #4
 80004b4:	9308      	str	r3, [sp, #32]
 80004b6:	2302      	movs	r3, #2
 80004b8:	9307      	str	r3, [sp, #28]
 80004ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004be:	9306      	str	r3, [sp, #24]
 80004c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004c4:	9305      	str	r3, [sp, #20]
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	9304      	str	r3, [sp, #16]
 80004cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d0:	9303      	str	r3, [sp, #12]
 80004d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d6:	9302      	str	r3, [sp, #8]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	e00c      	b.n	80004f8 <ex10_run+0x31c>
 80004de:	bf00      	nop
 80004e0:	20000028 	.word	0x20000028
 80004e4:	88888889 	.word	0x88888889
 80004e8:	91a2b3c5 	.word	0x91a2b3c5
 80004ec:	cccccccd 	.word	0xcccccccd
 80004f0:	40010800 	.word	0x40010800
 80004f4:	2aaaaaab 	.word	0x2aaaaaab
 80004f8:	2340      	movs	r3, #64	; 0x40
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2320      	movs	r3, #32
 80004fe:	2210      	movs	r2, #16
 8000500:	2108      	movs	r1, #8
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <ex10_run+0x340>)
 8000504:	f001 f938 	bl	8001778 <clearNumberOnClock>

		 }


		  num++;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <ex10_run+0x344>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <ex10_run+0x344>)
 8000512:	801a      	strh	r2, [r3, #0]
	    /* USER CODE END WHILE */


	    /* USER CODE BEGIN 3 */

}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40010800 	.word	0x40010800
 8000520:	20000028 	.word	0x20000028

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 f92e 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f80e 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f848 	bl	80005c4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ex1_init();
 8000534:	f7ff fe0a 	bl	800014c <ex1_init>
  ex10_init();
 8000538:	f7ff fe2a 	bl	8000190 <ex10_init>
  while (1){
	  ex1_run();
 800053c:	f7ff fe18 	bl	8000170 <ex1_run>
	  ex10_run();
 8000540:	f7ff fe4c 	bl	80001dc <ex10_run>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f000 f981 	bl	800084c <HAL_Delay>
	  ex1_run();
 800054a:	e7f7      	b.n	800053c <main+0x18>

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2228      	movs	r2, #40	; 0x28
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f9b6 	bl	80018cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fc16 	bl	8000db4 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800058e:	f000 f86f 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fe82 	bl	80012b4 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b6:	f000 f85b 	bl	8000670 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3740      	adds	r7, #64	; 0x40
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_GPIO_Init+0xa0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <MX_GPIO_Init+0xa0>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_GPIO_Init+0xa0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_GPIO_Init+0xa0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <MX_GPIO_Init+0xa0>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_GPIO_Init+0xa0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|GREEN_2_Pin
 8000608:	2200      	movs	r2, #0
 800060a:	f64d 71fe 	movw	r1, #57342	; 0xdffe
 800060e:	4816      	ldr	r0, [pc, #88]	; (8000668 <MX_GPIO_Init+0xa4>)
 8000610:	f000 fb9e 	bl	8000d50 <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|RED_2_Pin|GREEN_3_Pin|YELLOW_3_Pin
                          |RED_3_Pin|GREEN_4_Pin|YELLOW_4_Pin|RED_4_Pin
                          |LED_RED_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_1_1_Pin|LED7_1_2_Pin|LED7_2_3_Pin|LED7_2_4_Pin
 8000614:	2200      	movs	r2, #0
 8000616:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800061a:	4814      	ldr	r0, [pc, #80]	; (800066c <MX_GPIO_Init+0xa8>)
 800061c:	f000 fb98 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_1_Pin YELLOW_1_Pin RED_1_Pin GREEN_2_Pin
                           YELLOW_2_Pin RED_2_Pin GREEN_3_Pin YELLOW_3_Pin
                           RED_3_Pin GREEN_4_Pin YELLOW_4_Pin RED_4_Pin
                           LED_RED_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|GREEN_2_Pin
 8000620:	f64d 73fe 	movw	r3, #57342	; 0xdffe
 8000624:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|RED_2_Pin|GREEN_3_Pin|YELLOW_3_Pin
                          |RED_3_Pin|GREEN_4_Pin|YELLOW_4_Pin|RED_4_Pin
                          |LED_RED_Pin|LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <MX_GPIO_Init+0xa4>)
 800063a:	f000 fa0f 	bl	8000a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_1_1_Pin LED7_1_2_Pin LED7_2_3_Pin LED7_2_4_Pin
                           LED7_2_5_Pin LED7_2_6_Pin LED7_2_7_Pin LED7_1_3_Pin
                           LED7_1_4_Pin LED7_1_5_Pin LED7_1_6_Pin LED7_1_7_Pin
                           LED7_2_1_Pin LED7_2_2_Pin */
  GPIO_InitStruct.Pin = LED7_1_1_Pin|LED7_1_2_Pin|LED7_2_3_Pin|LED7_2_4_Pin
 800063e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8000642:	60bb      	str	r3, [r7, #8]
                          |LED7_2_5_Pin|LED7_2_6_Pin|LED7_2_7_Pin|LED7_1_3_Pin
                          |LED7_1_4_Pin|LED7_1_5_Pin|LED7_1_6_Pin|LED7_1_7_Pin
                          |LED7_2_1_Pin|LED7_2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4619      	mov	r1, r3
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_GPIO_Init+0xa8>)
 8000658:	f000 fa00 	bl	8000a5c <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800
 800066c:	40010c00 	.word	0x40010c00

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_MspInit+0x5c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_MspInit+0x5c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_MspInit+0x60>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_MspInit+0x60>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000726:	f000 f875 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
	...

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800073c:	f7ff fff7 	bl	800072e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000742:	490c      	ldr	r1, [pc, #48]	; (8000774 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000758:	4c09      	ldr	r4, [pc, #36]	; (8000780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000766:	f001 f88d 	bl	8001884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fedb 	bl	8000524 <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000778:	08001920 	.word	0x08001920
  ldr r2, =_sbss
 800077c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000780:	20000030 	.word	0x20000030

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f92b 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff ff6a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f935 	bl	8000a42 <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f90b 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x1c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x20>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <HAL_IncTick+0x20>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000008 	.word	0x20000008
 8000834:	2000002c 	.word	0x2000002c

08000838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	2000002c 	.word	0x2000002c

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff fff0 	bl	8000838 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffe0 	bl	8000838 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff90 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff49 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb0 	bl	80009b0 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e148      	b.n	8000d02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a70:	2201      	movs	r2, #1
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f040 8137 	bne.w	8000cfc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4aa3      	ldr	r2, [pc, #652]	; (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d05e      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000a98:	4aa1      	ldr	r2, [pc, #644]	; (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d875      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000a9e:	4aa1      	ldr	r2, [pc, #644]	; (8000d24 <HAL_GPIO_Init+0x2c8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d058      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a9f      	ldr	r2, [pc, #636]	; (8000d24 <HAL_GPIO_Init+0x2c8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d86f      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000aaa:	4a9f      	ldr	r2, [pc, #636]	; (8000d28 <HAL_GPIO_Init+0x2cc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d052      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a9d      	ldr	r2, [pc, #628]	; (8000d28 <HAL_GPIO_Init+0x2cc>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d869      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ab6:	4a9d      	ldr	r2, [pc, #628]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d04c      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000abc:	4a9b      	ldr	r2, [pc, #620]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d863      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ac2:	4a9b      	ldr	r2, [pc, #620]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d046      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a99      	ldr	r2, [pc, #612]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d85d      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ace:	2b12      	cmp	r3, #18
 8000ad0:	d82a      	bhi.n	8000b28 <HAL_GPIO_Init+0xcc>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d859      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ad6:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <HAL_GPIO_Init+0x80>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b31 	.word	0x08000b31
 8000ae4:	08000b43 	.word	0x08000b43
 8000ae8:	08000b85 	.word	0x08000b85
 8000aec:	08000b8b 	.word	0x08000b8b
 8000af0:	08000b8b 	.word	0x08000b8b
 8000af4:	08000b8b 	.word	0x08000b8b
 8000af8:	08000b8b 	.word	0x08000b8b
 8000afc:	08000b8b 	.word	0x08000b8b
 8000b00:	08000b8b 	.word	0x08000b8b
 8000b04:	08000b8b 	.word	0x08000b8b
 8000b08:	08000b8b 	.word	0x08000b8b
 8000b0c:	08000b8b 	.word	0x08000b8b
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b8b 	.word	0x08000b8b
 8000b18:	08000b8b 	.word	0x08000b8b
 8000b1c:	08000b8b 	.word	0x08000b8b
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	4a82      	ldr	r2, [pc, #520]	; (8000d34 <HAL_GPIO_Init+0x2d8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b2e:	e02c      	b.n	8000b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e029      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e024      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e01f      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	330c      	adds	r3, #12
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e01a      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d102      	bne.n	8000b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e013      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	611a      	str	r2, [r3, #16]
          break;
 8000b76:	e009      	b.n	8000b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	615a      	str	r2, [r3, #20]
          break;
 8000b82:	e003      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e000      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          break;
 8000b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d801      	bhi.n	8000b96 <HAL_GPIO_Init+0x13a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	e001      	b.n	8000b9a <HAL_GPIO_Init+0x13e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
 8000ba0:	d802      	bhi.n	8000ba8 <HAL_GPIO_Init+0x14c>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0x152>
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	3b08      	subs	r3, #8
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	6a39      	ldr	r1, [r7, #32]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8090 	beq.w	8000cfc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bdc:	4b56      	ldr	r3, [pc, #344]	; (8000d38 <HAL_GPIO_Init+0x2dc>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a55      	ldr	r2, [pc, #340]	; (8000d38 <HAL_GPIO_Init+0x2dc>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b53      	ldr	r3, [pc, #332]	; (8000d38 <HAL_GPIO_Init+0x2dc>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf4:	4a51      	ldr	r2, [pc, #324]	; (8000d3c <HAL_GPIO_Init+0x2e0>)
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <HAL_GPIO_Init+0x2e4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1e0>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_GPIO_Init+0x2e8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1dc>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a47      	ldr	r2, [pc, #284]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1d8>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1e2>
 8000c34:	2303      	movs	r3, #3
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1e2>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1e2>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4e:	493b      	ldr	r1, [pc, #236]	; (8000d3c <HAL_GPIO_Init+0x2e0>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	4937      	ldr	r1, [pc, #220]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	608b      	str	r3, [r1, #8]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c76:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4933      	ldr	r1, [pc, #204]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	492d      	ldr	r1, [pc, #180]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60cb      	str	r3, [r1, #12]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4929      	ldr	r1, [pc, #164]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4923      	ldr	r1, [pc, #140]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	491f      	ldr	r1, [pc, #124]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4919      	ldr	r1, [pc, #100]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4915      	ldr	r1, [pc, #84]	; (8000d4c <HAL_GPIO_Init+0x2f0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	3301      	adds	r3, #1
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f47f aeaf 	bne.w	8000a70 <HAL_GPIO_Init+0x14>
  }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	372c      	adds	r7, #44	; 0x2c
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	10320000 	.word	0x10320000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10220000 	.word	0x10220000
 8000d2c:	10210000 	.word	0x10210000
 8000d30:	10120000 	.word	0x10120000
 8000d34:	10110000 	.word	0x10110000
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d6c:	e003      	b.n	8000d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4013      	ands	r3, r2
 8000d98:	041a      	lsls	r2, r3, #16
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43d9      	mvns	r1, r3
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	400b      	ands	r3, r1
 8000da2:	431a      	orrs	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e26c      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8087 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd4:	4b92      	ldr	r3, [pc, #584]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d00c      	beq.n	8000dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de0:	4b8f      	ldr	r3, [pc, #572]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d112      	bne.n	8000e12 <HAL_RCC_OscConfig+0x5e>
 8000dec:	4b8c      	ldr	r3, [pc, #560]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df8:	d10b      	bne.n	8000e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfa:	4b89      	ldr	r3, [pc, #548]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d06c      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x12c>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d168      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e246      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1a:	d106      	bne.n	8000e2a <HAL_RCC_OscConfig+0x76>
 8000e1c:	4b80      	ldr	r3, [pc, #512]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a7f      	ldr	r2, [pc, #508]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e02e      	b.n	8000e88 <HAL_RCC_OscConfig+0xd4>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x98>
 8000e32:	4b7b      	ldr	r3, [pc, #492]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a7a      	ldr	r2, [pc, #488]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b78      	ldr	r3, [pc, #480]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a77      	ldr	r2, [pc, #476]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e01d      	b.n	8000e88 <HAL_RCC_OscConfig+0xd4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0xbc>
 8000e56:	4b72      	ldr	r3, [pc, #456]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a71      	ldr	r2, [pc, #452]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b6f      	ldr	r3, [pc, #444]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a6e      	ldr	r2, [pc, #440]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_RCC_OscConfig+0xd4>
 8000e70:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a6a      	ldr	r2, [pc, #424]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b68      	ldr	r3, [pc, #416]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a67      	ldr	r2, [pc, #412]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fcd2 	bl	8000838 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fcce 	bl	8000838 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1fa      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0xe4>
 8000eb6:	e014      	b.n	8000ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fcbe 	bl	8000838 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fcba 	bl	8000838 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e1e6      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	4b53      	ldr	r3, [pc, #332]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x10c>
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d063      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eee:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00b      	beq.n	8000f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000efa:	4b49      	ldr	r3, [pc, #292]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d11c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x18c>
 8000f06:	4b46      	ldr	r3, [pc, #280]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <HAL_RCC_OscConfig+0x176>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d001      	beq.n	8000f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e1ba      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4939      	ldr	r1, [pc, #228]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3e:	e03a      	b.n	8000fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d020      	beq.n	8000f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <HAL_RCC_OscConfig+0x270>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fc73 	bl	8000838 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f56:	f7ff fc6f 	bl	8000838 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e19b      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4927      	ldr	r1, [pc, #156]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
 8000f88:	e015      	b.n	8000fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc52 	bl	8000838 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f98:	f7ff fc4e 	bl	8000838 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e17a      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d03a      	beq.n	8001038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d019      	beq.n	8000ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_RCC_OscConfig+0x274>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fc32 	bl	8000838 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fc2e 	bl	8000838 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e15a      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 fa9a 	bl	8001530 <RCC_Delay>
 8000ffc:	e01c      	b.n	8001038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_RCC_OscConfig+0x274>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001004:	f7ff fc18 	bl	8000838 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100a:	e00f      	b.n	800102c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fc14 	bl	8000838 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d908      	bls.n	800102c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e140      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	42420000 	.word	0x42420000
 8001028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102c:	4b9e      	ldr	r3, [pc, #632]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e9      	bne.n	800100c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80a6 	beq.w	8001192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104a:	4b97      	ldr	r3, [pc, #604]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10d      	bne.n	8001072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b94      	ldr	r3, [pc, #592]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a93      	ldr	r2, [pc, #588]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b91      	ldr	r3, [pc, #580]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800106e:	2301      	movs	r3, #1
 8001070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001072:	4b8e      	ldr	r3, [pc, #568]	; (80012ac <HAL_RCC_OscConfig+0x4f8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	2b00      	cmp	r3, #0
 800107c:	d118      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107e:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_RCC_OscConfig+0x4f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a8a      	ldr	r2, [pc, #552]	; (80012ac <HAL_RCC_OscConfig+0x4f8>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108a:	f7ff fbd5 	bl	8000838 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001092:	f7ff fbd1 	bl	8000838 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e0fd      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a4:	4b81      	ldr	r3, [pc, #516]	; (80012ac <HAL_RCC_OscConfig+0x4f8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x312>
 80010b8:	4b7b      	ldr	r3, [pc, #492]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a7a      	ldr	r2, [pc, #488]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6213      	str	r3, [r2, #32]
 80010c4:	e02d      	b.n	8001122 <HAL_RCC_OscConfig+0x36e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x334>
 80010ce:	4b76      	ldr	r3, [pc, #472]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a75      	ldr	r2, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	6213      	str	r3, [r2, #32]
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a72      	ldr	r2, [pc, #456]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	f023 0304 	bic.w	r3, r3, #4
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	e01c      	b.n	8001122 <HAL_RCC_OscConfig+0x36e>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d10c      	bne.n	800110a <HAL_RCC_OscConfig+0x356>
 80010f0:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4a6c      	ldr	r2, [pc, #432]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6213      	str	r3, [r2, #32]
 80010fc:	4b6a      	ldr	r3, [pc, #424]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4a69      	ldr	r2, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6213      	str	r3, [r2, #32]
 8001108:	e00b      	b.n	8001122 <HAL_RCC_OscConfig+0x36e>
 800110a:	4b67      	ldr	r3, [pc, #412]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a66      	ldr	r2, [pc, #408]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	4b64      	ldr	r3, [pc, #400]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	4a63      	ldr	r2, [pc, #396]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800111c:	f023 0304 	bic.w	r3, r3, #4
 8001120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d015      	beq.n	8001156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff fb85 	bl	8000838 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001130:	e00a      	b.n	8001148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001132:	f7ff fb81 	bl	8000838 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001140:	4293      	cmp	r3, r2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e0ab      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0ee      	beq.n	8001132 <HAL_RCC_OscConfig+0x37e>
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fb6f 	bl	8000838 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115c:	e00a      	b.n	8001174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fb6b 	bl	8000838 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f241 3288 	movw	r2, #5000	; 0x1388
 800116c:	4293      	cmp	r3, r2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e095      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1ee      	bne.n	800115e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d105      	bne.n	8001192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001186:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a47      	ldr	r2, [pc, #284]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8081 	beq.w	800129e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d061      	beq.n	800126c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d146      	bne.n	800123e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b0:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <HAL_RCC_OscConfig+0x4fc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fb3f 	bl	8000838 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fb3b 	bl	8000838 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e067      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d108      	bne.n	80011f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	492d      	ldr	r1, [pc, #180]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a19      	ldr	r1, [r3, #32]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	430b      	orrs	r3, r1
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_RCC_OscConfig+0x4fc>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fb0f 	bl	8000838 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121e:	f7ff fb0b 	bl	8000838 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e037      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x46a>
 800123c:	e02f      	b.n	800129e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_RCC_OscConfig+0x4fc>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff faf8 	bl	8000838 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124c:	f7ff faf4 	bl	8000838 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e020      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x498>
 800126a:	e018      	b.n	800129e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e013      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	429a      	cmp	r2, r3
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	42420060 	.word	0x42420060

080012b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0d0      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d910      	bls.n	80012f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0207 	bic.w	r2, r3, #7
 80012de:	4965      	ldr	r1, [pc, #404]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b63      	ldr	r3, [pc, #396]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0b8      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800131a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	494d      	ldr	r1, [pc, #308]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d040      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d115      	bne.n	8001392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e07f      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e073      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06b      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f023 0203 	bic.w	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4936      	ldr	r1, [pc, #216]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a4:	f7ff fa48 	bl	8000838 <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013aa:	e00a      	b.n	80013c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ac:	f7ff fa44 	bl	8000838 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e053      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 020c 	and.w	r2, r3, #12
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d1eb      	bne.n	80013ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d210      	bcs.n	8001404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0207 	bic.w	r2, r3, #7
 80013ea:	4922      	ldr	r1, [pc, #136]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e032      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4916      	ldr	r1, [pc, #88]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001442:	f000 f821 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001446:	4602      	mov	r2, r0
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <HAL_RCC_ClockConfig+0x1c8>)
 8001454:	5ccb      	ldrb	r3, [r1, r3]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_RCC_ClockConfig+0x1cc>)
 800145c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x1d0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f9a6 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000
 8001478:	40021000 	.word	0x40021000
 800147c:	080018f4 	.word	0x080018f4
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_GetSysClockFreq+0x94>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d002      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x30>
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d003      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x36>
 80014b6:	e027      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ba:	613b      	str	r3, [r7, #16]
      break;
 80014bc:	e027      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d010      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_RCC_GetSysClockFreq+0x94>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	0c5b      	lsrs	r3, r3, #17
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ea:	fb02 f203 	mul.w	r2, r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e004      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	613b      	str	r3, [r7, #16]
      break;
 8001506:	e002      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetSysClockFreq+0x98>)
 800150a:	613b      	str	r3, [r7, #16]
      break;
 800150c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150e:	693b      	ldr	r3, [r7, #16]
}
 8001510:	4618      	mov	r0, r3
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200
 8001524:	08001904 	.word	0x08001904
 8001528:	08001914 	.word	0x08001914
 800152c:	003d0900 	.word	0x003d0900

08001530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <RCC_Delay+0x34>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <RCC_Delay+0x38>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0a5b      	lsrs	r3, r3, #9
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800154c:	bf00      	nop
  }
  while (Delay --);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	60fa      	str	r2, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <RCC_Delay+0x1c>
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000000 	.word	0x20000000
 8001568:	10624dd3 	.word	0x10624dd3

0800156c <clearAllClock>:
}
void led_off(GPIO_TypeDef* GPIOx,uint16_t LED){
	HAL_GPIO_WritePin(GPIOx, LED, SET);
}
void clearAllClock(GPIO_TypeDef* GPIOx,uint16_t LED_1,uint16_t LED_2,uint16_t LED_3,uint16_t LED_4,uint16_t LED_5,uint16_t LED_6,uint16_t LED_7
		,uint16_t LED_8,uint16_t LED_9,uint16_t LED_10,uint16_t LED_11,uint16_t LED_12){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4603      	mov	r3, r0
 800157c:	817b      	strh	r3, [r7, #10]
 800157e:	460b      	mov	r3, r1
 8001580:	813b      	strh	r3, [r7, #8]
 8001582:	4613      	mov	r3, r2
 8001584:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOx, LED_1, SET);
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fbdf 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_2, SET);
 8001592:	893b      	ldrh	r3, [r7, #8]
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fbd9 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_3, SET);
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fbd3 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_4, SET);
 80015aa:	8b3b      	ldrh	r3, [r7, #24]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff fbcd 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_5, SET);
 80015b6:	8bbb      	ldrh	r3, [r7, #28]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff fbc7 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_6, SET);
 80015c2:	8c3b      	ldrh	r3, [r7, #32]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4619      	mov	r1, r3
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fbc1 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_7, SET);
 80015ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d0:	2201      	movs	r2, #1
 80015d2:	4619      	mov	r1, r3
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff fbbb 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_8, SET);
 80015da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015dc:	2201      	movs	r2, #1
 80015de:	4619      	mov	r1, r3
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fbb5 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_9, SET);
 80015e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015e8:	2201      	movs	r2, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fbaf 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_10, SET);
 80015f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fba9 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_11, SET);
 80015fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fba3 	bl	8000d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, LED_12, SET);
 800160a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fb9d 	bl	8000d50 <HAL_GPIO_WritePin>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <setNumberOnClock>:
	HAL_GPIO_WritePin(GPIOx, LED_10,RESET);
	HAL_GPIO_WritePin(GPIOx, LED_11,RESET);
	HAL_GPIO_WritePin(GPIOx, LED_12,RESET);
}
void setNumberOnClock(GPIO_TypeDef* GPIOx,uint16_t LED_1,uint16_t LED_2,uint16_t LED_3,uint16_t LED_4,uint16_t LED_5,uint16_t LED_6,uint16_t LED_7
		,uint16_t LED_8,uint16_t LED_9,uint16_t LED_10,uint16_t LED_11,uint16_t LED_12,uint16_t num){
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af0a      	add	r7, sp, #40	; 0x28
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	817b      	strh	r3, [r7, #10]
 8001632:	460b      	mov	r3, r1
 8001634:	813b      	strh	r3, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	80fb      	strh	r3, [r7, #6]
	if(num<0)
	{
		setAllClock(GPIOx, LED_1, LED_2, LED_3, LED_4, LED_5, LED_6, LED_7, LED_8, LED_9, LED_10, LED_11, LED_12);
	return;
	}
	switch(num){
 800163a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800163c:	2b0b      	cmp	r3, #11
 800163e:	d86f      	bhi.n	8001720 <setNumberOnClock+0x100>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <setNumberOnClock+0x28>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001679 	.word	0x08001679
 800164c:	08001687 	.word	0x08001687
 8001650:	08001695 	.word	0x08001695
 8001654:	080016a3 	.word	0x080016a3
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016bf 	.word	0x080016bf
 8001660:	080016cd 	.word	0x080016cd
 8001664:	080016db 	.word	0x080016db
 8001668:	080016e9 	.word	0x080016e9
 800166c:	080016f7 	.word	0x080016f7
 8001670:	08001705 	.word	0x08001705
 8001674:	08001713 	.word	0x08001713
	case 0:
		HAL_GPIO_WritePin(GPIOx, LED_12, RESET);
 8001678:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fb66 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001684:	e072      	b.n	800176c <setNumberOnClock+0x14c>
	case 1:
		HAL_GPIO_WritePin(GPIOx, LED_1, RESET);
 8001686:	897b      	ldrh	r3, [r7, #10]
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff fb5f 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001692:	e06b      	b.n	800176c <setNumberOnClock+0x14c>
	case 2:
		HAL_GPIO_WritePin(GPIOx, LED_2, RESET);
 8001694:	893b      	ldrh	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7ff fb58 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016a0:	e064      	b.n	800176c <setNumberOnClock+0x14c>
	case 3:
		HAL_GPIO_WritePin(GPIOx, LED_3, RESET);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fb51 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016ae:	e05d      	b.n	800176c <setNumberOnClock+0x14c>
	case 4:
		HAL_GPIO_WritePin(GPIOx, LED_4, RESET);
 80016b0:	8b3b      	ldrh	r3, [r7, #24]
 80016b2:	2200      	movs	r2, #0
 80016b4:	4619      	mov	r1, r3
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff fb4a 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016bc:	e056      	b.n	800176c <setNumberOnClock+0x14c>
	case 5:
		HAL_GPIO_WritePin(GPIOx, LED_5, RESET);
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	2200      	movs	r2, #0
 80016c2:	4619      	mov	r1, r3
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fb43 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016ca:	e04f      	b.n	800176c <setNumberOnClock+0x14c>
	case 6:
		HAL_GPIO_WritePin(GPIOx, LED_6, RESET);
 80016cc:	8c3b      	ldrh	r3, [r7, #32]
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff fb3c 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016d8:	e048      	b.n	800176c <setNumberOnClock+0x14c>
	case 7:
		HAL_GPIO_WritePin(GPIOx, LED_7, RESET);
 80016da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7ff fb35 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016e6:	e041      	b.n	800176c <setNumberOnClock+0x14c>
	case 8:
		HAL_GPIO_WritePin(GPIOx, LED_8, RESET);
 80016e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff fb2e 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80016f4:	e03a      	b.n	800176c <setNumberOnClock+0x14c>
	case 9:
		HAL_GPIO_WritePin(GPIOx, LED_9, RESET);
 80016f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fb27 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001702:	e033      	b.n	800176c <setNumberOnClock+0x14c>
	case 10:
		HAL_GPIO_WritePin(GPIOx, LED_10, RESET);
 8001704:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fb20 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001710:	e02c      	b.n	800176c <setNumberOnClock+0x14c>
	case 11:
		HAL_GPIO_WritePin(GPIOx, LED_11, RESET);
 8001712:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff fb19 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 800171e:	e025      	b.n	800176c <setNumberOnClock+0x14c>
	default:
		setNumberOnClock(GPIOx, LED_1, LED_2, LED_3, LED_4, LED_5, LED_6, LED_7, LED_8, LED_9, LED_10, LED_11, LED_12, num%12);
 8001720:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <setNumberOnClock+0x154>)
 8001724:	fba3 1302 	umull	r1, r3, r3, r2
 8001728:	08d9      	lsrs	r1, r3, #3
 800172a:	460b      	mov	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	88f8      	ldrh	r0, [r7, #6]
 8001738:	893a      	ldrh	r2, [r7, #8]
 800173a:	8979      	ldrh	r1, [r7, #10]
 800173c:	9309      	str	r3, [sp, #36]	; 0x24
 800173e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001740:	9308      	str	r3, [sp, #32]
 8001742:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001744:	9307      	str	r3, [sp, #28]
 8001746:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001748:	9306      	str	r3, [sp, #24]
 800174a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800174c:	9305      	str	r3, [sp, #20]
 800174e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001750:	9304      	str	r3, [sp, #16]
 8001752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001754:	9303      	str	r3, [sp, #12]
 8001756:	8c3b      	ldrh	r3, [r7, #32]
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	8bbb      	ldrh	r3, [r7, #28]
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	8b3b      	ldrh	r3, [r7, #24]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4603      	mov	r3, r0
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff ff5b 	bl	8001620 <setNumberOnClock>
		break;
 800176a:	bf00      	nop
	}
}
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	aaaaaaab 	.word	0xaaaaaaab

08001778 <clearNumberOnClock>:
void clearNumberOnClock(GPIO_TypeDef* GPIOx,uint16_t LED_1,uint16_t LED_2,uint16_t LED_3,uint16_t LED_4,uint16_t LED_5,uint16_t LED_6,uint16_t LED_7
		,uint16_t LED_8,uint16_t LED_9,uint16_t LED_10,uint16_t LED_11,uint16_t LED_12,uint16_t num){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	460b      	mov	r3, r1
 800178c:	813b      	strh	r3, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
	switch(num){
 8001792:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001794:	2b0b      	cmp	r3, #11
 8001796:	d86f      	bhi.n	8001878 <clearNumberOnClock+0x100>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <clearNumberOnClock+0x28>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017d1 	.word	0x080017d1
 80017a4:	080017df 	.word	0x080017df
 80017a8:	080017ed 	.word	0x080017ed
 80017ac:	080017fb 	.word	0x080017fb
 80017b0:	08001809 	.word	0x08001809
 80017b4:	08001817 	.word	0x08001817
 80017b8:	08001825 	.word	0x08001825
 80017bc:	08001833 	.word	0x08001833
 80017c0:	08001841 	.word	0x08001841
 80017c4:	0800184f 	.word	0x0800184f
 80017c8:	0800185d 	.word	0x0800185d
 80017cc:	0800186b 	.word	0x0800186b
	case 0:
		HAL_GPIO_WritePin(GPIOx, LED_12, SET);
 80017d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017d2:	2201      	movs	r2, #1
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff faba 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80017dc:	e04d      	b.n	800187a <clearNumberOnClock+0x102>
	case 1:
		HAL_GPIO_WritePin(GPIOx, LED_1, SET);
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4619      	mov	r1, r3
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff fab3 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80017ea:	e046      	b.n	800187a <clearNumberOnClock+0x102>
	case 2:
		HAL_GPIO_WritePin(GPIOx, LED_2, SET);
 80017ec:	893b      	ldrh	r3, [r7, #8]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff faac 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 80017f8:	e03f      	b.n	800187a <clearNumberOnClock+0x102>
	case 3:
		HAL_GPIO_WritePin(GPIOx, LED_3, SET);
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff faa5 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001806:	e038      	b.n	800187a <clearNumberOnClock+0x102>
	case 4:
		HAL_GPIO_WritePin(GPIOx, LED_4, SET);
 8001808:	8b3b      	ldrh	r3, [r7, #24]
 800180a:	2201      	movs	r2, #1
 800180c:	4619      	mov	r1, r3
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff fa9e 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001814:	e031      	b.n	800187a <clearNumberOnClock+0x102>
	case 5:
		HAL_GPIO_WritePin(GPIOx, LED_5, SET);
 8001816:	8bbb      	ldrh	r3, [r7, #28]
 8001818:	2201      	movs	r2, #1
 800181a:	4619      	mov	r1, r3
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fa97 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001822:	e02a      	b.n	800187a <clearNumberOnClock+0x102>
	case 6:
		HAL_GPIO_WritePin(GPIOx, LED_6, SET);
 8001824:	8c3b      	ldrh	r3, [r7, #32]
 8001826:	2201      	movs	r2, #1
 8001828:	4619      	mov	r1, r3
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fa90 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001830:	e023      	b.n	800187a <clearNumberOnClock+0x102>
	case 7:
		HAL_GPIO_WritePin(GPIOx, LED_7, SET);
 8001832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fa89 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 800183e:	e01c      	b.n	800187a <clearNumberOnClock+0x102>
	case 8:
		HAL_GPIO_WritePin(GPIOx, LED_8, SET);
 8001840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001842:	2201      	movs	r2, #1
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fa82 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 800184c:	e015      	b.n	800187a <clearNumberOnClock+0x102>
	case 9:
		HAL_GPIO_WritePin(GPIOx, LED_9, SET);
 800184e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001850:	2201      	movs	r2, #1
 8001852:	4619      	mov	r1, r3
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fa7b 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 800185a:	e00e      	b.n	800187a <clearNumberOnClock+0x102>
	case 10:
		HAL_GPIO_WritePin(GPIOx, LED_10, SET);
 800185c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800185e:	2201      	movs	r2, #1
 8001860:	4619      	mov	r1, r3
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f7ff fa74 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001868:	e007      	b.n	800187a <clearNumberOnClock+0x102>
	case 11:
		HAL_GPIO_WritePin(GPIOx, LED_11, SET);
 800186a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800186c:	2201      	movs	r2, #1
 800186e:	4619      	mov	r1, r3
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff fa6d 	bl	8000d50 <HAL_GPIO_WritePin>
		break;
 8001876:	e000      	b.n	800187a <clearNumberOnClock+0x102>
	default:
		break;
 8001878:	bf00      	nop
	}
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop

08001884 <__libc_init_array>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	2600      	movs	r6, #0
 8001888:	4d0c      	ldr	r5, [pc, #48]	; (80018bc <__libc_init_array+0x38>)
 800188a:	4c0d      	ldr	r4, [pc, #52]	; (80018c0 <__libc_init_array+0x3c>)
 800188c:	1b64      	subs	r4, r4, r5
 800188e:	10a4      	asrs	r4, r4, #2
 8001890:	42a6      	cmp	r6, r4
 8001892:	d109      	bne.n	80018a8 <__libc_init_array+0x24>
 8001894:	f000 f822 	bl	80018dc <_init>
 8001898:	2600      	movs	r6, #0
 800189a:	4d0a      	ldr	r5, [pc, #40]	; (80018c4 <__libc_init_array+0x40>)
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <__libc_init_array+0x44>)
 800189e:	1b64      	subs	r4, r4, r5
 80018a0:	10a4      	asrs	r4, r4, #2
 80018a2:	42a6      	cmp	r6, r4
 80018a4:	d105      	bne.n	80018b2 <__libc_init_array+0x2e>
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
 80018a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ac:	4798      	blx	r3
 80018ae:	3601      	adds	r6, #1
 80018b0:	e7ee      	b.n	8001890 <__libc_init_array+0xc>
 80018b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b6:	4798      	blx	r3
 80018b8:	3601      	adds	r6, #1
 80018ba:	e7f2      	b.n	80018a2 <__libc_init_array+0x1e>
 80018bc:	08001918 	.word	0x08001918
 80018c0:	08001918 	.word	0x08001918
 80018c4:	08001918 	.word	0x08001918
 80018c8:	0800191c 	.word	0x0800191c

080018cc <memset>:
 80018cc:	4603      	mov	r3, r0
 80018ce:	4402      	add	r2, r0
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d100      	bne.n	80018d6 <memset+0xa>
 80018d4:	4770      	bx	lr
 80018d6:	f803 1b01 	strb.w	r1, [r3], #1
 80018da:	e7f9      	b.n	80018d0 <memset+0x4>

080018dc <_init>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	bf00      	nop
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr

080018e8 <_fini>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	bf00      	nop
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr
